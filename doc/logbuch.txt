*logbuch.txt*  Syntax highlighting and handy mappings for logbuch.txt files

==============================================================================
INTRODUCTION                                                     *logbuch-intro*

This plugin provides syntax highlighting and mappings for working with
logbuch.txt files.

==============================================================================
LICENSE                                                        *logbuch-license*

logbuch.vim Copyright Â© 2016, 2017 Gernot Schulz <gernot@intevation.de>
Licensed under the GNU General Public License (GPL), version 2 or later.
Absolutely no warranty, see COPYING file for details.

    https://www.gnu.org/licenses/gpl-2.0.txt

==============================================================================
WORKING WITH LOGBUCH FILES                                *logbuch-create-entry*

Default key mappings:

*<leader>o*                                                  <Plug>(logbuch-new)
        Create a new logbuch entry as the top-most entry

*<leader>O*                                    <Plug>(logbuch-new-from-template)
        Create a new logbuch entry from an existing entry under the cursor.
        This will yank an entry and paste it at the top with updated date
        & author information.

*<leader>ll*                                   <Plug>(logbuch-todo-marker-above)
                                             <Plug>(logbuch-todo-marker-below)
        Insert a TODO marker at the current position.  There can only be one
        marker per logbuch entry.

*<leader>lv*                                    <Plug>(logbuch-modify-selection)

        When visually selecting a logbuch entry that starts with an asterisk,
        modify the selection to exclude it.

        This enables you to copy only the executable part of entries such as
        the following while still using quick linewise selections.

          * /bin/ls /home \
            /etc          \
            /usr

        Additionally, the final newline will be excluded from the selection,
        so in some cases (e.g., as with the above example) the command will
        not be automatically executed after pasting it into a terminal
        emulator.

        For workflows with frequent copy & paste, a key mapping like the
        following might come in handy: >

          map <leader>lc <Plug>(logbuch-modify-selection)"*y
<

------------------------------------------------------------------------------
NAVIGATION                                                  *logbuch-navigation*

This plugins provides the following normal and visual mode navigation mappings:

*]]*                                                <Plug>(logbuch-next-section)
        Move to next logbuch entry
*[[*                                                <Plug>(logbuch-prev-section)
        Move to previous logbuch entry
*][*                                             <Plug>(logbuch-next-subsection)
        Move to next logbuch bullet point
*[]*                                             <Plug>(logbuch-prev-subsection)
        Move to previous logbuch bullet point


------------------------------------------------------------------------------
REMOTELY EDITING LOGBUCH FILES                                  *logbuch-remote*

If the |netrw| plugin is available, Vim can edit logbuch files remotely.
This plugin extends netrw's functionality.

*<leader>ge*                                  <Plug>(logbuch-remote-edit-prompt)
        Open an :edit prompt with the remote host part filled in.

*<leader>gf*                                           <Plug>(logbuch-remote-gf)
        Like *gf* but open the file path under the cursor on the remote
        machine.

*<leader>ln*                                     <Plug>(logbuch-remote-new-host)
        Open an :edit prompt for a logbuch.txt on a new remote host.

*<leader>lN*                              <Plug>(logbuch-remote-substitute-host)
        Like logbuch-remote-new-host but before opening the :edit prompt apply
        the given substitution regex on the current hostname.

        For example, assuming the current buffer is: >

          scp://root@web1.example.com//etc/logbuch.txt
<
        The pattern s/web/db/ given to this function would open the following
        prompt: >

          :edit scp://root@db1.example.com//etc/logbuch.txt
<
==============================================================================
OPTIONS                                                        *logbuch-options*

                                                      *g:logbuch_cfg_no_mapping*
Disable the above default key mappings by setting this variable to 1.
Custom mappings can be configured using the <Plug> interface.

Disable all pre-defined key mappings: >

  let g:logbuch_cfg_no_mapping = 1
<

                                                 *g:logbuch_cfg_template_marker*
Choose whether a TODO marker line should be automatically inserted for new
entries created from templates.

Disabling this feature: >

  let g:logbuch_cfg_template_marker = 0
<

 vim:tw=78:et:ft=help:norl:
